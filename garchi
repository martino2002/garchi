#!/usr/bin/env python3
"""
Arch Package Installer - A simple GUI for installing local .tar.zst packages
Similar to gdebi for Debian systems, but for Arch Linux packages
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import threading
import os
import sys

class ArchPackageInstaller:
    def __init__(self, root, initial_file=None):
        self.root = root
        self.root.title("Arch Package Installer")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        self.selected_file = None
        self.setup_ui()
        
        # Load initial file if provided
        if initial_file:
            self.load_file(initial_file)
        
    def setup_ui(self):
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # File selection section
        ttk.Label(main_frame, text="Select Package File:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        
        file_frame = ttk.Frame(main_frame)
        file_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(0, weight=1)
        
        self.file_path_var = tk.StringVar()
        self.file_entry = ttk.Entry(file_frame, textvariable=self.file_path_var, state="readonly")
        self.file_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        self.browse_btn = ttk.Button(file_frame, text="Browse...", command=self.browse_file)
        self.browse_btn.grid(row=0, column=1)
        
        # Package info section
        info_frame = ttk.LabelFrame(main_frame, text="Package Information", padding="5")
        info_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        info_frame.columnconfigure(0, weight=1)
        
        self.info_text = scrolledtext.ScrolledText(info_frame, height=8, width=70, state="disabled")
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        # Output section
        output_frame = ttk.LabelFrame(main_frame, text="Installation Output", padding="5")
        output_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        output_frame.columnconfigure(0, weight=1)
        output_frame.rowconfigure(0, weight=1)
        
        self.output_text = scrolledtext.ScrolledText(output_frame, height=12, width=70, state="disabled")
        self.output_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=(10, 0))
        
        self.install_btn = ttk.Button(button_frame, text="Install Package", 
                                     command=self.install_package, state="disabled")
        self.install_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.quit_btn = ttk.Button(button_frame, text="Quit", command=self.root.quit)
        self.quit_btn.pack(side=tk.LEFT)
        
    def load_file(self, filename):
        """Load a package file programmatically"""
        if os.path.exists(filename) and filename.endswith(('.tar.zst', '.pkg.tar.zst')):
            self.selected_file = filename
            self.file_path_var.set(filename)
            self.install_btn.config(state="normal")
            self.show_package_info()
            return True
        return False
    
    def browse_file(self):
        """Open file dialog to select a .tar.zst package"""
        filetypes = [
            ("Arch packages", "*.pkg.tar.zst"),
            ("All tar.zst files", "*.tar.zst"),
            ("All files", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="Select Arch Package",
            filetypes=filetypes
        )
        
        if filename:
            self.load_file(filename)
    
    def show_package_info(self):
        """Display package information using pacman -Qip"""
        if not self.selected_file:
            return
            
        self.info_text.config(state="normal")
        self.info_text.delete(1.0, tk.END)
        
        try:
            # Get package info
            result = subprocess.run(['pacman', '-Qip', self.selected_file], 
                                  capture_output=True, text=True, check=True)
            self.info_text.insert(tk.END, result.stdout)
        except subprocess.CalledProcessError as e:
            self.info_text.insert(tk.END, f"Error reading package info:\n{e.stderr}")
        except FileNotFoundError:
            self.info_text.insert(tk.END, "Error: pacman not found. Make sure you're running this on Arch Linux.")
        
        self.info_text.config(state="disabled")
    
    def install_package(self):
        """Install the selected package using pacman"""
        if not self.selected_file:
            messagebox.showerror("Error", "No package selected")
            return
            
        if not os.path.exists(self.selected_file):
            messagebox.showerror("Error", "Selected file does not exist")
            return
        
        # Confirm installation
        response = messagebox.askyesno(
            "Confirm Installation",
            f"Do you want to install the package:\n{os.path.basename(self.selected_file)}?\n\n"
            "This will require administrator privileges."
        )
        
        if not response:
            return
        
        # Disable install button during installation
        self.install_btn.config(state="disabled")
        
        # Clear output
        self.output_text.config(state="normal")
        self.output_text.delete(1.0, tk.END)
        self.output_text.config(state="disabled")
        
        # Run installation in separate thread
        thread = threading.Thread(target=self._install_worker)
        thread.daemon = True
        thread.start()
    
    def _install_worker(self):
        """Worker thread for package installation"""
        try:
            # Use pkexec or sudo to run pacman with elevated privileges
            cmd = ['pkexec', 'pacman', '-U', '--needed', '--noconfirm', self.selected_file]
            
            # Try pkexec first, fall back to sudo
            try:
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                                         stderr=subprocess.STDOUT, text=True, bufsize=1)
            except FileNotFoundError:
                # pkexec not available, try sudo
                cmd[0] = 'sudo'
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                                         stderr=subprocess.STDOUT, text=True, bufsize=1)
            
            # Read output line by line
            for line in process.stdout:
                self.root.after(0, self._update_output, line)
            
            process.wait()
            
            if process.returncode == 0:
                self.root.after(0, self._installation_complete, True)
            else:
                self.root.after(0, self._installation_complete, False)
                
        except Exception as e:
            self.root.after(0, self._update_output, f"Error: {str(e)}\n")
            self.root.after(0, self._installation_complete, False)
    
    def _update_output(self, text):
        """Update output text widget (called from main thread)"""
        self.output_text.config(state="normal")
        self.output_text.insert(tk.END, text)
        self.output_text.see(tk.END)
        self.output_text.config(state="disabled")
    
    def _installation_complete(self, success):
        """Handle installation completion (called from main thread)"""
        self.install_btn.config(state="normal")
        
        if success:
            messagebox.showinfo("Success", "Package installed successfully!")
        else:
            messagebox.showerror("Error", "Package installation failed. Check the output for details.")

def main():
    # Check if running on Linux
    if sys.platform != 'linux':
        print("This program is designed for Arch Linux systems.")
        sys.exit(1)
    
    # Check if pacman is available
    try:
        subprocess.run(['pacman', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Error: pacman not found. This program requires Arch Linux with pacman.")
        sys.exit(1)
    
    # Parse command line arguments
    initial_file = None
    if len(sys.argv) > 1:
        potential_file = sys.argv[1]
        if os.path.exists(potential_file) and potential_file.endswith(('.tar.zst', '.pkg.tar.zst')):
            initial_file = os.path.abspath(potential_file)
        else:
            print(f"Warning: '{potential_file}' is not a valid package file or doesn't exist.")
    
    root = tk.Tk()
    app = ArchPackageInstaller(root, initial_file)
    root.mainloop()

if __name__ == "__main__":
    main()
